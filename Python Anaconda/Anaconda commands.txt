to create environment in Anaconda default directory:
conda create --name environmentname packagename

to create environment in Anaconda defaulty directory with non-default version of Python:
conda create --name environmentname python=3 packagename

to create environment not in the Anaconda default directory:
conda create -p ~/Documents/mydirectory python=3

to activate environment not in Anaconda default directory:
source activate ~/Documents/mydirectory

to install package into currently active environment:
conda install packagename

to install package into environment other than currently activated environment:
conda install --name environmentname packagename

to list all Anaconda environments:
conda info --envs

to clone/copy an environment:
conda create --name new_environment_name --clone existing_environment_name

to delete an environment:
conda remove --name environment --all

to call 'conda' command by its full path name (assuming Anaconda installed in home directory):
~/anaconda2/bin/conda
~/anaconda3/bin/conda

to display all version of Python that are available to install:
conda search --full-name python

to list all packages installed in the currently activated environment:
conda list

to save configuration of currently active environment to '.yml' file:
conda env export > environment.yml

to re-create environment from a '.yml' file:
conda env create -f environment.yml

to save cross-platform (e.g., Linux, Windows) configuration of currently active environment to '.yml' file:
conda env export --from-history > environment.yml

to deactivate currently active environment:
conda deactivate

to update Anaconda:
conda upgrade anaconda
conda upgrade conda

to upgrade Anaconda to Python 3.6:
conda install python=3.6
    (this failed on my current machine, but can still create environments with 3.6 with:
    (conda create --name new_environment_name python=3.6 package_names)
    
to show available channels:
conda config --show channels

to add 'conda-forge' as a channel:
conda config --add channels conda-forge


To get Vim to work well with a Conda virtual environment, install it into the environment with:
conda install -c conda-forge vim


    
    
    
    
https://towardsdatascience.com/conda-essential-concepts-and-tricks-e478ed53b5b

TIP: always turn on the strict channel policy. It makes conda faster, and helps to avoid conflicts. You can do it with conda config --set channel_priority strict


There are compatibility problems between conda-forge packages and packages contained in the default conda channels. Therefore, you should always set up channel_priority: strictas explained in the previous section and give priority to the conda-forge channel over the default channels when installing things or creating environments. There are two ways of doing that. Either you always specify conda install -c conda-forge or conda create -c conda-forge using always conda-forge as the first listed channel, OR, you create a .condarc file in your home with this content:

channels:
  - conda-forge
  - defaults
channel_priority: strict

An environment should either use conda-forge or not, from creation to destruction. Do not mix and match. If you created it without using the conda-forge channel, then do not add it to the mix halfway. In practice, I always create an environment with conda-forge unless in very specific cases where I found incompatibilities.

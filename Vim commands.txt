http://vim.wikia.com/wiki/Searching

In normal mode you can search forwards by pressing / (or <kDivide>) then typing your search pattern. Press Esc to cancel or press Enter to perform the search. Then press n to search forwards for the next occurrence, or N to search backwards. Type ggn to jump to the first match, or GN to jump to the last. 

:%s/search_for_this/replace_with_this/    - search whole file and replace
:%s/search_for_this/replace_with_this/c   - confirm each replace


Use folds to collapse selected blocks. Useful if you've finished a subroutine and want to save window space, or maybe want to fold all blocks of comments.

    select block, then :fold
    zo - open
    zc - close

See :help foldmethod for options, and use :mkview and :loadview to save and restore the current window. 


V       - selects entire lines 
v       - selects range of text
ctrl-v  - selects columns
gv      - reselect block


'>' moves selected text to the right; '<' moves it to the left


ctrl-w up arrow  - move cursor up a window
 ctrl-w ctrl-w    - move cursor to another window (cycle)
 ctrl-w_          - maximize current window
 ctrl-w=          - make all equal size
 10 ctrl-w+       - increase window size by 10 lines
 :vsplit file     - vertical split
 :sview file      - same as split, but readonly
 :hide            - close current window
 :only            - keep only this window open
 :ls              - show current buffers
 :b 2             - open buffer #2 in this window
 
 
 
 Copy a word and paste it over other words:
yiw 	Yank inner word (copy word under cursor, say "first").
... 	Move the cursor to another word (say "second").
viwp 	Select "second", then replace it with "first".
... 	Move the cursor to another word (say "third").
viw"0p 	Select "third", then replace it with "first".

Copy a line and paste it over other lines:
yy 	Yank current line (say "first line").
... 	Move the cursor to another line (say "second line").
Vp 	Select "second line", then replace it with "first line".
... 	Move the cursor to another line (say "third line").
V"0p 	Select "third line", then replace it with "first line". 




To undo recent changes, from normal mode use the undo command:

    u: undo last change (can be repeated to undo preceding commands)
    Ctrl-R: Redo changes which were undone (undo the undos). Compare to . to repeat a previous change, at the current cursor position. Ctrl-R will redo a previously undone change, wherever the change occurred. 

A related command is:

    U: return the last line which was modified to its original state (reverse all changes in last modified line) 

U is not actually a true "undo" command as it does not actually navigate undo history like u and CTRL-R. This means that (somewhat confusingly) U is itself undo-able with u; it creates a new change to reverse previous changes. 





You can change the case of text:

    Toggle case "HellO" to "hELLo" with g~ then a movement. 
    Uppercase "HellO" to "HELLO" with gU then a movement. 
    Lowercase "HellO" to "hello" with gu then a movement. 

Alternatively, you can visually select text then press ~ to toggle case, or U to convert to uppercase, or u to convert to lowercase. 






How can I select a bunch of text and comment it all out?

First, move the cursor to the first char of the first line in block code you want to comment, then type:
CTRL + V                                    
then vim will go into VISUAL BLOCK mode. Use j to move the cursor down until you reach the last line of your code block. Then type:
Shift + I
now vim goes to INSERT mode and the cursor is at the first char of the first line. Finally, type # then ESC and the code block is now commented.

To decomment, do the same things but instead of type Shift + I, you just type x to remove all # after highlight them in VISUAL BLOCK mode.






http://vim.wikia.com/wiki/Search_and_replace

The :substitute command searches for a text pattern, and replaces it with a text string. There are many options, but these are what you probably want:

:%s/foo/bar/g
    Find each occurrence of 'foo' (in all lines), and replace it with 'bar'. 

:s/foo/bar/g
    Find each occurrence of 'foo' (in the current line only), and replace it with 'bar'. 

:%s/foo/bar/gc
    Change each 'foo' to 'bar', but ask for confirmation first. 

:%s/\<foo\>/bar/gc
    Change only whole words exactly matching 'foo' to 'bar'; ask for confirmation. 

:%s/foo/bar/gci
    Change each 'foo' (case insensitive due to the i flag) to 'bar'; ask for confirmation. 
    :%s/foo\c/bar/gc is the same because \c makes the search case insensitive. 
    This may be wanted after using :set noignorecase to make searches case sensitive (the default). 

:%s/foo/bar/gcI
    Change each 'foo' (case sensitive due to the I flag) to 'bar'; ask for confirmation. 
    :%s/foo\C/bar/gc is the same because \C makes the search case sensitive. 
    This may be wanted after using :set ignorecase to make searches case insensitive. 

The g flag means global â€“ each occurrence in the line is changed, rather than just the first. This tip assumes the default setting for the 'gdefault' and 'edcompatible' option (off), which requires that the g flag be included in %s///g to perform a global substitute. Using :set gdefault creates confusion because then %s/// is global, whereas %s///g is not (that is, g reverses its meaning). 




To open a file in the current working directory from within Vim:
:e filename.ext

To browse the current working directory:
:Ex

To browse any directory:
:Ex directory_path



To find decimal, hexadecimal, and octal numerical designations of a character under the cursor:
:as

To search for a character by its decimal numerical designation:
/\%d8216


To print number of characters in the latest saved version of the current file:
:!wc -m %


To open a terminal with a vertical split within Vim:
:terminal ++curwin
:term ++curwin


To find files with fuzzy search with 'fzf' plugin:
:Files


To delete plug-ins from Vim-Plug pane (junegunn/vim-plug):
:PlugClean






Get current working directory:
pwd


Change working directory:
cd


Create a link to Directory A in the home directory:
ln -s ~/directory_a ~/


pathnames with spaces:  need to place backslash before space to escape space:
to get this:
/home/zh/project folder
you have to enter this:
/home/zh/project\ folder


list permissions of a file 'myfile.ext':
ls -l myfile.ext


change permissions of a file to make it executable by anyone:
chmod +x myfile.ext
change permissions of a file to make it readable, writable, and executable by owner only:
chmod 700 myfile.ext


find ID number of a process:
pidof
for example:
pidof nano


to send termination signal (SIGTERM; default and safest way to kill process), where PID is the process ID number (all 3 commands below do same thing):
kill PID
kill -15 PID
kill -SIGTERM PID


to send termination signal to multiple processes:
kill PID1 PID2 PID3


to check amount of hard drive space:
df -h


to find a filename in the current directory (searches recursively):
find . -type f -name 'filename.txt'


search for string in all files in current directory (or its subdirectories):
grep -nr 'a_string' .


copy files over SSH, with either SCP or RSYNC:
scp -r * user_name@server:/home/directory_name
rsync -e "ssh" -avz * user_name@server:/home/directory_name


list detailed hardware information about system:
lshw
hwinfo


short list of hardware information about system:
lshw -short


list information about CPU:
lscpu


list information about block/storage devices:
lsblk
lsblk -a


list information about USB ports:
lsusb


list information about Linux OS:
uname -a








redirect output:
https://askubuntu.com/questions/420981/how-do-i-save-terminal-output-to-a-file



    command > output.txt

    The standard output stream will be redirected to the file only, it will not be visible in the terminal. If the file already exists, it gets overwritten.

    command >> output.txt

    The standard output stream will be redirected to the file only, it will not be visible in the terminal. If the file already exists, the new data will get appended to the end of the file.

    command 2> output.txt

    The standard error stream will be redirected to the file only, it will not be visible in the terminal. If the file already exists, it gets overwritten.

    command 2>> output.txt

    The standard error stream will be redirected to the file only, it will not be visible in the terminal. If the file already exists, the new data will get appended to the end of the file.

    command &> output.txt

    Both the standard output and standard error stream will be redirected to the file only, nothing will be visible in the terminal. If the file already exists, it gets overwritten.

    command &>> output.txt

    Both the standard output and standard error stream will be redirected to the file only, nothing will be visible in the terminal. If the file already exists, the new data will get appended to the end of the file..

    command | tee output.txt

    The standard output stream will be copied to the file, it will still be visible in the terminal. If the file already exists, it gets overwritten.

    command | tee -a output.txt

    The standard output stream will be copied to the file, it will still be visible in the terminal. If the file already exists, the new data will get appended to the end of the file.

    (*)

    Bash has no shorthand syntax that allows piping only StdErr to a second command, which would be needed here in combination with tee again to complete the table. If you really need something like that, please look at "How to pipe stderr, and not stdout?" on Stack Overflow for some ways how this can be done e.g. by swapping streams or using process substitution.

    command |& tee output.txt

    Both the standard output and standard error streams will be copied to the file while still being visible in the terminal. If the file already exists, it gets overwritten.

    command |& tee -a output.txt

    Both the standard output and standard error streams will be copied to the file while still being visible in the terminal. If the file already exists, the new data will get appended to the end of the file.






